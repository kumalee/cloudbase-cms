{"version":3,"sources":["components/IconInput.js","components/IconField.js","components/UrlField.js","components/ImageField.js","components/FileField.js","components/MarkdownField.js","components/TextArrayField.js","components/resources.js"],"names":["props","onChange","useInput","input","useState","record","source","icon","updateIcon","pickLabel","cancelLabel","modalTitle","className","Typography","variant","paragraph","style","margin","color","label","onPick","name","Icon","useStyles","makeStyles","link","textDecoration","display","wordBreak","width","paddingLeft","UrlField","classes","href","target","rel","list","listStyleType","image","maxHeight","sourceValue","src","type","emptyText","title","obj","Object","prototype","toString","call","tempUrl","alt","component","converter","Showdown","tables","simplifiedAutoLink","strikethrough","tasklists","value","stripTags","get","dangerouslySetInnerHTML","__html","makeHtml","TextArrayField","Array","isArray","map","item","Chip","key","defaultProps","addLabel","RescourceComponentsFactory","collectionConfig","fields","description","RescourceTitle","id","canFilterFieldsType","filterFields","filter","field","includes","fieldType","RescourceFilter","Filter","fieldConfig","fieldName","fieldLabel","getEditConnectComponent","getEditArrayComponent","FieldComponent","getInputComponentByType","validate","getValidate","getFilterFieldEditComponent","expandFieldsFilter","childFields","expandFields","rowFields","hidden","textField","find","dateField","ExpandShow","Show","SimpleShowLayout","getFieldShowComponent","ListComponent","isSmall","useMediaQuery","theme","breakpoints","down","List","filters","sort","order","SimpleList","primaryText","secondaryText","format","Date","locale","zhCN","tertiaryText","linkType","Datagrid","length","expand","EditButton","ShowComponent","React","memo","CreateComponent","Create","undoable","SimpleForm","getFieldEditComponent","EditComponent","Edit","TextInput","disabled","TextField","connectResource","connectField","connectMany","ReferenceArrayField","reference","getConnectResourceCollectionName","SingleFieldList","ChipField","ReferenceField","allowEmpty","getShowConnectComponent","isChildFieldsTypeArray","ArrayField","childFieldConfig","getShowArrayComponent","Component","MarkdownField","RichTextField","EmailField","DateField","showTime","BooleanField","ImageField","FileField","NumberField","SelectField","choices","options","IconField","getShowComponentByType","defaultValue","helpText","expectField","expectValue","FormDataConsumer","formData","scopedFormData","getSource","getFormValue","resouceCollectionName","window","cmsConfig","resouceIndexByCollectionName","getConnectFieldsOption","SelectInput","initialValue","helperText","LazyloadComponet","lazy","DateInput","DateTimeInput","ArrayInput","BooleanInput","ImageInput","accept","FileInput","NumberInput","SelectArrayInput","PasswordInput","IconInput","isRequired","stringMaxLength","stringMinLength","push","required","minLength","maxLength","regex","email","number","ReferenceArrayInput","perPage","AutocompleteArrayInput","optionText","ReferenceInput","AutocompleteInput","SimpleFormIterator","LazyComponent","fallback","LinearProgress","resouceIndexById","collectionName"],"mappings":"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","file":"static/js/7.7ef00981.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport MaterialUiIconPicker from \"react-material-ui-icon-picker\";\nimport { useInput } from \"react-admin\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default (props) => {\n  const {\n    input: { onChange },\n  } = useInput(props);\n\n  const [icon, updateIcon] = useState(props.record[props.source]);\n  const {\n    pickLabel = \"选择图标\",\n    cancelLabel = \"取消\",\n    modalTitle = \"图标选择器\",\n  } = props;\n\n  return (\n    <div className=\"tcb-cms-icon-input\">\n      <Typography\n        variant=\"caption\"\n        paragraph\n        style={{ margin: \"20px 0 10px\", color: \"rgba(0, 0, 0, 0.54)\" }}\n      >\n        图标设置\n      </Typography>\n      <MaterialUiIconPicker\n        label={pickLabel}\n        pickLabel={pickLabel}\n        cancelLabel={cancelLabel}\n        modalTitle={modalTitle}\n        onPick={(icon) => {\n          updateIcon(icon.name);\n          onChange(icon.name);\n        }}\n      ></MaterialUiIconPicker>\n      <Icon>{icon ? icon : \"library_books\"}</Icon>\n    </div>\n  );\n};\n","import React from 'react'\nimport Icon from '@material-ui/core/Icon'\n// https://material.io/resources/icons/?style=baseline\n// https://material-ui.com/zh/components/icons/#icon-font-icons\nexport default props => {\n  const icon = props.record?.[props.source]\n  return <Icon>{icon ? icon : 'library_books'}</Icon>\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport LaunchIcon from '@material-ui/icons/Launch'\n\nconst useStyles = makeStyles({\n  link: {\n    textDecoration: 'none',\n    display: 'block',\n    wordBreak: 'break-all'\n  },\n  icon: {\n    width: '0.5em',\n    paddingLeft: 2\n  }\n})\n\nconst UrlField = ({ record = {}, source }) => {\n  const classes = useStyles()\n  const link = record[source]\n  return (\n    link ?\n      <a href={link} className={classes.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        {link}\n        <LaunchIcon className={classes.icon} />\n      </a>\n      : null\n  )\n}\n\nexport default UrlField\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles(\n  {\n    list: {\n      display: \"flex\",\n      listStyleType: \"none\",\n    },\n    image: {\n      margin: \"0.5rem\",\n      maxHeight: \"10rem\",\n    },\n  },\n  { name: \"RaImageField\" }\n);\n\nexport default (props) => {\n  const { className, emptyText, record, source, title } = props;\n  let sourceValue;\n  let src;\n\n  if (isType(\"Object\")(record) && source in record) {\n    sourceValue = record[source];\n  } else {\n    sourceValue = record;\n  }\n\n  if (typeof sourceValue === \"string\") {\n    src = sourceValue;\n  } else {\n    src = sourceValue && sourceValue.tempUrl;\n  }\n\n  const classes = useStyles(props);\n  if (!src) {\n    return emptyText ? (\n      <Typography component=\"span\" variant=\"body2\" className={className}>\n        {emptyText}\n      </Typography>\n    ) : (\n      <div className={className} />\n    );\n  }\n\n  return (\n    <>\n      <p>\n        <small>预览图片</small>\n      </p>\n      <img className={classes.image} src={src} alt={title} />\n    </>\n  );\n};\n\nfunction isType(type) {\n  return function (obj) {\n    return Object.prototype.toString.call(obj) === \"[object \" + type + \"]\";\n  };\n}\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default (props) => {\n  const { className, emptyText, record, source, title } = props;\n  let sourceValue;\n  let src;\n\n  if (isType(\"Object\")(record) && source in record) {\n    sourceValue = record[source];\n  } else {\n    sourceValue = record;\n  }\n\n  if (typeof sourceValue === \"string\") {\n    src = sourceValue;\n  } else {\n    src = sourceValue && sourceValue.tempUrl;\n  }\n\n  if (!src) {\n    return emptyText ? (\n      <Typography component=\"span\" variant=\"body2\" className={className}>\n        {emptyText}\n      </Typography>\n    ) : (\n      <div className={className} />\n    );\n  }\n\n  return (\n    <>\n      <p>\n        <small>预览链接</small>\n      </p>\n      <a href={src} title={title} target=\"_blank\" rel=\"noopener noreferrer\">\n        {src}\n      </a>\n    </>\n  );\n};\n\nfunction isType(type) {\n  return function (obj) {\n    return Object.prototype.toString.call(obj) === \"[object \" + type + \"]\";\n  };\n}\n","\n\nimport React from 'react'\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\n\nimport * as Showdown from \"showdown\";\n\nconst converter = new Showdown.Converter({\n    tables: true,\n    simplifiedAutoLink: true,\n    strikethrough: true,\n    tasklists: true\n});\n\nexport default ({ className, emptyText, source, record = {}, stripTags, ...rest }) => {\n    const value = get(record, source);\n\n    return (\n        <Typography\n            className={className}\n            variant=\"body2\"\n            component=\"span\"\n        >\n            <span dangerouslySetInnerHTML={{ __html: converter.makeHtml(value) }} />\n        </Typography>\n    );\n};","import Chip from \"@material-ui/core/Chip\";\nimport React from \"react\";\n\nconst TextArrayField = ({ record, source }) => (\n  <>\n    {record[source] &&\n      Array.isArray(record[source]) &&\n      record[source].map((item) => (\n        <Chip style={{ margin: 2 }} label={item} key={item} />\n      ))}\n  </>\n);\nTextArrayField.defaultProps = { addLabel: true };\n\nexport default TextArrayField;\n","import React, { Suspense } from \"react\";\nimport {\n  List,\n  Datagrid,\n  TextField,\n  ReferenceField,\n  EditButton,\n  Edit,\n  TextInput,\n  SimpleForm,\n  ReferenceInput,\n  SelectInput,\n  SelectArrayInput,\n  Create,\n  Filter,\n  Show,\n  SimpleShowLayout,\n  RichTextField,\n  DateField,\n  ArrayField,\n  BooleanField,\n  NumberField,\n  SelectField,\n  ReferenceArrayField,\n  EmailField,\n  ArrayInput,\n  AutocompleteInput,\n  AutocompleteArrayInput,\n  BooleanInput,\n  DateInput,\n  DateTimeInput,\n  ImageInput,\n  FileInput,\n  NumberInput,\n  PasswordInput,\n  ReferenceArrayInput,\n  SingleFieldList,\n  ChipField,\n  SimpleFormIterator,\n  FormDataConsumer,\n  SimpleList,\n  required,\n  minLength,\n  maxLength,\n  regex,\n  email,\n  number,\n} from \"react-admin\";\nimport { useMediaQuery, Chip, LinearProgress } from \"@material-ui/core\";\nimport IconInput from \"./IconInput\";\nimport IconField from \"./IconField\";\nimport UrlField from \"./UrlField\";\nimport ImageField from \"./ImageField\";\nimport FileField from \"./FileField\";\nimport MarkdownField from \"./MarkdownField\";\nimport TextArrayField from \"./TextArrayField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { format } from \"date-fns\";\nimport { zhCN } from \"date-fns/locale\";\n\n/**\n * 生成一组资源操作组件\n */\nexport const RescourceComponentsFactory = (collectionConfig) => {\n  const { fields, label, description } = collectionConfig;\n  const RescourceTitle = ({ record }) => {\n    return (\n      <span>\n        {label} / {record ? `#${record.id}` : \"\"}\n      </span>\n    );\n  };\n  const canFilterFieldsType = [\n    \"String\",\n    \"Number\",\n    \"DateTime\",\n    \"Date\",\n    \"Boolean\",\n    \"Email\",\n    \"Tel\",\n    \"Url\",\n    \"Connect\",\n  ];\n  const filterFields = fields.filter((field) =>\n    canFilterFieldsType.includes(field.fieldType)\n  );\n  const RescourceFilter = (props) => (\n    <Filter {...props}>\n      {filterFields.map((fieldConfig) => {\n        return getFilterFieldEditComponent(fieldConfig);\n      })}\n    </Filter>\n  );\n  const expandFieldsFilter = (field) =>\n    [\"RichText\", \"Markdown\"].includes(field.fieldType) || field.childFields;\n  const expandFields = fields.filter(expandFieldsFilter);\n  const rowFields = fields\n    .filter((field) => !expandFieldsFilter(field))\n    .filter((field) => {\n      return \"hidden\" in field ? !field.hidden : true;\n    });\n  const textField = fields.find((field) => field.fieldType === \"String\");\n  const dateField = fields.find((field) =>\n    [\"Date\", \"DateTime\"].includes(field.fieldType)\n  );\n\n  const ExpandShow = (props) => (\n    <Show\n      {...props}\n      /* disable the app title change when shown */\n      title=\" \"\n      className=\"tcb-cms-expand\"\n    >\n      <SimpleShowLayout>\n        {expandFields.map((fieldConfig) => {\n          return getFieldShowComponent(fieldConfig);\n        })}\n      </SimpleShowLayout>\n    </Show>\n  );\n  return {\n    ListComponent: (props) => {\n      const isSmall = useMediaQuery((theme) => theme.breakpoints.down(\"sm\"));\n      return (\n        <>\n          {description && (\n            <Typography\n              variant=\"body1\"\n              color=\"inherit\"\n              className=\"tcb-cms-desc\"\n            >\n              {description}\n            </Typography>\n          )}\n          <List\n            filters={<RescourceFilter />}\n            {...props}\n            sort={{ field: \"order\", order: \"DESC\" }}\n            title={label}\n          >\n            {isSmall ? (\n              <SimpleList\n                primaryText={(record) => record[textField?.fieldName || \"id\"]}\n                secondaryText={(record) => {\n                  return record[dateField?.fieldName]\n                    ? format(new Date(record[dateField?.fieldName]), \"PPpp\", {\n                        locale: zhCN,\n                      })\n                    : \"\";\n                }}\n                tertiaryText={() => \"...\"}\n                linkType=\"show\"\n              />\n            ) : (\n              <Datagrid\n                {...(expandFields.length ? { expand: ExpandShow } : {})}\n              >\n                {rowFields.map((fieldConfig) => {\n                  return getFieldShowComponent(fieldConfig);\n                })}\n                <EditButton />\n              </Datagrid>\n            )}\n          </List>\n        </>\n      );\n    },\n    ShowComponent: React.memo((props) => {\n      return (\n        <Show {...props} title={<RescourceTitle />}>\n          <SimpleShowLayout>\n            {fields.map((fieldConfig) => {\n              return getFieldShowComponent(fieldConfig);\n            })}\n          </SimpleShowLayout>\n        </Show>\n      );\n    }),\n    CreateComponent: React.memo((props) => {\n      return (\n        <Create {...props} title={`${label} / 新建`} undoable={false}>\n          <SimpleForm className=\"tcb-cms-form\">\n            {fields.map((fieldConfig) => {\n              return getFieldEditComponent(fieldConfig);\n            })}\n          </SimpleForm>\n        </Create>\n      );\n    }),\n    EditComponent: React.memo((props) => {\n      return (\n        <Edit title={<RescourceTitle />} {...props} undoable={false}>\n          <SimpleForm className=\"tcb-cms-form\">\n            <TextInput disabled source=\"id\" />\n            {fields.map((fieldConfig) => {\n              return getFieldEditComponent(fieldConfig);\n            })}\n          </SimpleForm>\n        </Edit>\n      );\n    }),\n  };\n};\n\n/**\n * 渲染单个字段展示\n */\nfunction getFieldShowComponent(fieldConfig) {\n  const { fieldName, fieldType, fieldLabel, hidden = false } = fieldConfig;\n  if (hidden) return TextField;\n  if (fieldType === \"Connect\") {\n    return getShowConnectComponent(fieldConfig);\n  }\n\n  if (fieldType === \"Array\") {\n    return getShowArrayComponent(fieldConfig);\n  }\n\n  const FieldComponent = getShowComponentByType(fieldType, fieldConfig);\n\n  return (\n    <FieldComponent label={fieldLabel} key={fieldName} source={fieldName} />\n  );\n}\n\n/**\n * 渲染单个字段编辑\n */\nfunction getFieldEditComponent(fieldConfig) {\n  let {\n    fieldName,\n    fieldType,\n    fieldLabel,\n    defaultValue,\n    helpText,\n    expectField,\n    expectValue,\n  } = fieldConfig;\n  if (fieldName === \"id\") return null;\n\n  if (fieldType === \"Array\") {\n    return getEditArrayComponent(fieldConfig);\n  }\n\n  const FieldComponent = getInputComponentByType(fieldType, fieldConfig);\n\n  return (\n    <FormDataConsumer key={fieldName}>\n      {({ formData, scopedFormData, getSource, ...props }) => {\n        function getFormValue(formData, scopedFormData, expectField) {\n          if (scopedFormData) {\n            return scopedFormData[expectField];\n          } else {\n            return formData[expectField];\n          }\n        }\n\n        if (\n          expectField &&\n          getFormValue(formData, scopedFormData, expectField) !== expectValue\n        ) {\n          return null;\n        }\n\n        if (fieldName === \"defaultValue\") {\n          fieldType = getFormValue(formData, scopedFormData, \"fieldType\");\n\n          if (![\"String\"].includes(fieldType)) {\n            return null;\n          }\n        }\n\n        if (fieldName === \"isRequired\") {\n          fieldType = getFormValue(formData, scopedFormData, \"fieldType\");\n\n          if ([\"Connect\"].includes(fieldType)) {\n            return null;\n          }\n        }\n\n        if (fieldName === \"connectField\") {\n          let connectResource = getFormValue(\n            formData,\n            scopedFormData,\n            \"connectResource\"\n          );\n\n          if (connectResource) {\n            let options = getConnectFieldsOption(connectResource);\n\n            return (\n              <SelectInput\n                {...props}\n                label={fieldLabel}\n                key={fieldName}\n                source={getSource ? getSource(fieldName) : fieldName}\n                initialValue={defaultValue}\n                helperText={helpText}\n                choices={options}\n              />\n            );\n          }\n        }\n\n        if (fieldType === \"Connect\") {\n          return getEditConnectComponent({\n            ...fieldConfig,\n            fieldName: getSource ? getSource(fieldName) : fieldName,\n          });\n        }\n\n        const validate = getValidate(fieldType, fieldConfig);\n\n        return (\n          <FieldComponent\n            {...props}\n            label={fieldLabel}\n            key={fieldName}\n            source={getSource ? getSource(fieldName) : fieldName}\n            validate={validate}\n            initialValue={defaultValue}\n            helperText={helpText}\n          />\n        );\n      }}\n    </FormDataConsumer>\n  );\n}\n\n/**\n * 渲染单个字段编辑\n */\nfunction getFilterFieldEditComponent(fieldConfig) {\n  const { fieldName, fieldType, fieldLabel } = fieldConfig;\n  if (fieldName === \"id\") return null;\n  if (fieldType === \"Connect\") {\n    return getEditConnectComponent(fieldConfig);\n  } else if (fieldType === \"Array\") {\n    return getEditArrayComponent(fieldConfig);\n  }\n\n  const FieldComponent = getInputComponentByType(fieldType, fieldConfig);\n  const validate = getValidate(fieldType, fieldConfig);\n  return (\n    <FieldComponent\n      label={fieldLabel}\n      key={fieldName}\n      source={fieldName}\n      validate={validate}\n    />\n  );\n}\n\n/**\n * 根据类型获取展示字段组件\n */\nfunction getShowComponentByType(type, fieldConfig) {\n  let Component;\n  switch (type) {\n    case \"String\":\n      Component = TextField;\n      break;\n    case \"Markdown\":\n      Component = MarkdownField;\n      break;\n    case \"RichText\":\n      Component = RichTextField;\n      break;\n    case \"Url\":\n      Component = UrlField;\n      break;\n    case \"Email\":\n      Component = EmailField;\n      break;\n    case \"Date\":\n      Component = DateField;\n      break;\n    case \"DateTime\":\n      Component = (props) => <DateField {...props} showTime />;\n      break;\n    case \"Array\":\n      Component = ArrayField;\n      break;\n    case \"Boolean\":\n      Component = BooleanField;\n      break;\n    case \"Image\":\n      Component = ImageField;\n      break;\n    case \"File\":\n      Component = FileField;\n      break;\n    case \"Number\":\n      Component = NumberField;\n      break;\n    case \"Select\":\n      Component = (props) => (\n        <SelectField {...props} choices={fieldConfig.options}></SelectField>\n      );\n      break;\n    case \"SelectArray\":\n      Component = ({ record, source }) => (\n        <>\n          {record[source].map((item) => (\n            <Chip style={{ margin: 2 }} label={item} key={item} />\n          ))}\n        </>\n      );\n      break;\n    case \"Password\":\n      Component = TextField;\n      break;\n    case \"Icon\":\n      Component = IconField;\n      break;\n    default:\n      Component = TextField;\n      break;\n  }\n  return Component;\n}\n\n/**\n * 根据类型获取输入字段组件\n */\nfunction getInputComponentByType(type, fieldConfig) {\n  let Component;\n  switch (type) {\n    case \"String\":\n      Component = TextInput;\n      break;\n    case \"Email\":\n      Component = (props) => <TextInput {...props} type=\"email\" />;\n      break;\n    case \"Url\":\n      Component = (props) => <TextInput {...props} type=\"url\" />;\n      break;\n    case \"RichText\":\n      Component = LazyloadComponet(\n        React.lazy(() => import(\"ra-input-rich-text\"))\n      );\n      break;\n    case \"Markdown\":\n      Component = LazyloadComponet(React.lazy(() => import(\"./MarkdownInput\")));\n      break;\n    case \"Date\":\n      Component = DateInput;\n      break;\n    case \"DateTime\":\n      Component = DateTimeInput;\n      break;\n    case \"Array\":\n      Component = ArrayInput;\n      break;\n    case \"Boolean\":\n      Component = BooleanInput;\n      break;\n    case \"Image\":\n      Component = (props) => (\n        <ImageInput {...props} accept=\"image/*\">\n          <ImageField source={props.source} />\n        </ImageInput>\n      );\n      break;\n    case \"File\":\n      Component = (props) => (\n        <FileInput {...props}>\n          <FileField source={props.source} title=\"title\" />\n        </FileInput>\n      );\n      break;\n    case \"Number\":\n      Component = NumberInput;\n      break;\n    case \"Select\":\n      Component = (props) => (\n        <SelectInput {...props} choices={fieldConfig.options} />\n      );\n      break;\n    case \"SelectArray\":\n      Component = (props) => (\n        <SelectArrayInput {...props} choices={fieldConfig.options} />\n      );\n      break;\n    case \"Password\":\n      Component = PasswordInput;\n      break;\n    case \"Icon\":\n      Component = IconInput;\n      break;\n    default:\n      Component = TextInput;\n      break;\n  }\n  return Component;\n}\n\n/**\n * 根据类型获取验证函数\n */\nfunction getValidate(type, fieldConfig) {\n  const { isRequired, stringMaxLength, stringMinLength } = fieldConfig;\n\n  let validate = [];\n\n  if (isRequired) {\n    validate.push(required());\n  }\n\n  switch (type) {\n    case \"String\":\n      if (stringMinLength) {\n        validate.push(minLength(stringMinLength));\n      }\n\n      if (stringMaxLength) {\n        validate.push(maxLength(stringMaxLength));\n      }\n      break;\n    case \"Url\":\n      validate.push(regex(/^https?:\\/\\/[^\\s$.?#].[^\\s]*$/, \"请输入正确的网址\"));\n      break;\n    case \"Email\":\n      validate.push(email());\n      break;\n    case \"Number\":\n      validate.push(number());\n      break;\n    case \"Tel\":\n      validate.push(\n        regex(\n          /^((\\d{11})|(\\d{7,8})|(\\d{4}|\\d{3})-(\\d{7,8}))$/,\n          \"请输入正确的电话号码\"\n        )\n      );\n      break;\n    default:\n      break;\n  }\n  return validate;\n}\n\n/**\n * 获取关联编辑组件\n */\nfunction getEditConnectComponent(fieldConfig) {\n  const {\n    fieldName,\n    fieldLabel,\n    connectResource,\n    connectField,\n    connectMany,\n  } = fieldConfig;\n\n  if (connectMany) {\n    return (\n      <ReferenceArrayInput\n        label={fieldLabel}\n        source={fieldName}\n        reference={getConnectResourceCollectionName(connectResource)}\n        key={fieldName}\n        perPage={1000}\n      >\n        <AutocompleteArrayInput optionText={connectField} allowEmpty />\n      </ReferenceArrayInput>\n    );\n  } else {\n    return (\n      <ReferenceInput\n        label={fieldLabel}\n        source={fieldName}\n        reference={getConnectResourceCollectionName(connectResource)}\n        key={fieldName}\n        perPage={1000}\n        allowEmpty\n      >\n        <AutocompleteInput optionText={connectField} allowEmpty />\n      </ReferenceInput>\n    );\n  }\n}\n\n/**\n * 获取关联展示组件\n */\nfunction getShowConnectComponent(fieldConfig) {\n  const {\n    fieldName,\n    fieldLabel,\n    connectResource,\n    connectField,\n    connectMany,\n  } = fieldConfig;\n  if (connectMany) {\n    return (\n      <ReferenceArrayField\n        label={fieldLabel}\n        source={fieldName}\n        reference={getConnectResourceCollectionName(connectResource)}\n        key={fieldName}\n      >\n        <SingleFieldList linkType=\"show\">\n          <ChipField source={connectField} />\n        </SingleFieldList>\n      </ReferenceArrayField>\n    );\n  } else {\n    return (\n      <ReferenceField\n        label={fieldLabel}\n        source={fieldName}\n        reference={getConnectResourceCollectionName(connectResource)}\n        allowEmpty\n        key={fieldName}\n      >\n        <TextField source={connectField} />\n      </ReferenceField>\n    );\n  }\n}\n\n/**\n * 渲染数组字段\n */\nfunction getShowArrayComponent(fieldConfig) {\n  const { fieldName, fieldLabel, childFields } = fieldConfig;\n  const isChildFieldsTypeArray = Array.isArray(childFields);\n  return childFields ? (\n    <ArrayField source={fieldName} key={fieldName} label={fieldLabel}>\n      {isChildFieldsTypeArray && (\n        <Datagrid>\n          {childFields.map((childFieldConfig) => {\n            return getFieldShowComponent(childFieldConfig);\n          })}\n        </Datagrid>\n      )}\n    </ArrayField>\n  ) : (\n    <TextArrayField source={fieldName} key={fieldName} label={fieldLabel} />\n  );\n}\n\n/**\n * 渲染数组字段编辑\n */\nfunction getEditArrayComponent(fieldConfig) {\n  const { fieldName, fieldLabel, childFields, defaultValue } = fieldConfig;\n  const isChildFieldsTypeArray = Array.isArray(childFields);\n\n  return (\n    <ArrayInput\n      source={fieldName}\n      key={fieldName}\n      label={fieldLabel}\n      initialValue={defaultValue}\n    >\n      <SimpleFormIterator className=\"tcb-cms-array-input\">\n        {isChildFieldsTypeArray ? (\n          childFields.map((childFieldConfig) => {\n            return getFieldEditComponent(childFieldConfig);\n          })\n        ) : (\n          <TextInput label={fieldLabel} />\n        )}\n      </SimpleFormIterator>\n    </ArrayInput>\n  );\n}\n\nfunction LazyloadComponet(LazyComponent) {\n  return (props) => (\n    <Suspense fallback={<LinearProgress />}>\n      <LazyComponent {...props} />\n    </Suspense>\n  );\n}\n\nfunction getConnectResourceCollectionName(connectResource) {\n  return (\n    window.cmsConfig.resouceIndexById[connectResource]?.collectionName ||\n    connectResource\n  );\n}\n\nfunction getConnectFieldsOption(connectResource) {\n  const resouceCollectionName = getConnectResourceCollectionName(\n    connectResource\n  );\n\n  return window.cmsConfig.resouceIndexByCollectionName[\n    resouceCollectionName\n  ].fields\n    .filter((fieldConfig) => fieldConfig.fieldType !== \"Connect\")\n    .map((fieldConfig) => {\n      return {\n        id: fieldConfig.fieldName,\n        name: fieldConfig.fieldLabel,\n      };\n    });\n}\n"],"sourceRoot":""}